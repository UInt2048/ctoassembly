
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Jun 18 16:47:57 CEST 2017
//----------------------------------------------------

package com.ctoassembly.compiler;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;

import com.ctoassembly.compiler.Codegen.Program;
import com.ctoassembly.compiler.Type.SimpleType;

import java_cup.runtime.Symbol;
import java_cup.runtime.lr_parser;

/**
 * CUP v0.10k generated parser.
 * 
 * @version Sun Jun 18 16:47:57 CEST 2017
 */
public class parser extends java_cup.runtime.lr_parser {

	/** Default constructor. */
	public parser() {
		super();
	}

	/** Constructor which sets the default scanner. */
	public parser(java_cup.runtime.Scanner s) {
		super(s);
	}

	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(
			new String[] { "\000\140\000\002\002\004\000\002\017\003\000\002\043"
					+ "\003\000\002\043\004\000\002\042\003\000\002\042\003"
					+ "\000\002\044\002\000\002\020\006\000\002\013\003\000"
					+ "\002\013\005\000\002\012\003\000\002\012\005\000\002"
					+ "\012\005\000\002\003\003\000\002\003\004\000\002\003"
					+ "\005\000\002\003\006\000\002\015\005\000\002\014\003"
					+ "\000\002\014\005\000\002\045\002\000\002\021\011\000"
					+ "\002\023\003\000\002\023\005\000\002\023\002\000\002"
					+ "\022\004\000\002\046\002\000\002\047\002\000\002\024"
					+ "\007\000\002\025\004\000\002\025\002\000\002\027\003"
					+ "\000\002\026\003\000\002\026\003\000\002\026\003\000"
					+ "\002\026\003\000\002\026\003\000\002\026\003\000\002"
					+ "\026\003\000\002\026\003\000\002\050\002\000\002\041"
					+ "\005\000\002\030\004\000\002\006\005\000\002\010\005"
					+ "\000\002\010\005\000\002\010\005\000\002\010\005\000"
					+ "\002\010\005\000\002\010\005\000\002\010\005\000\002"
					+ "\010\005\000\002\010\005\000\002\007\003\000\002\007"
					+ "\003\000\002\007\004\000\002\007\003\000\002\007\004"
					+ "\000\002\007\004\000\002\007\005\000\002\007\004\000"
					+ "\002\007\003\000\002\007\003\000\002\007\003\000\002"
					+ "\007\003\000\002\004\004\000\002\004\004\000\002\005"
					+ "\003\000\002\051\002\000\002\011\007\000\002\016\003"
					+ "\000\002\016\004\000\002\016\005\000\002\052\002\000"
					+ "\002\016\006\000\002\053\002\000\002\016\006\000\002"
					+ "\031\003\000\002\031\002\000\002\032\003\000\002\032"
					+ "\005\000\002\033\004\000\002\034\003\000\002\054\002"
					+ "\000\002\034\006\000\002\055\002\000\002\056\002\000"
					+ "\002\035\011\000\002\057\002\000\002\060\002\000\002"
					+ "\036\011\000\002\061\002\000\002\037\006\000\002\062"
					+ "\002\000\002\063\002\000\002\040\007" });

	/** Access to production table. */
	public short[][] production_table() {
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(
			new String[] { "\000\233\000\004\007\010\001\002\000\006\002\ufffc\007"
					+ "\ufffc\001\002\000\004\002\235\001\002\000\006\002\ufffd"
					+ "\007\ufffd\001\002\000\006\002\000\007\010\001\002\000"
					+ "\006\004\012\021\015\001\002\000\006\002\uffff\007\uffff"
					+ "\001\002\000\014\010\ufff4\030\ufff4\031\125\035\024\043"
					+ "\ufff4\001\002\000\006\030\ufff9\043\ufff9\001\002\000\010"
					+ "\010\031\030\ufff7\043\ufff7\001\002\000\004\004\030\001"
					+ "\002\000\006\030\ufffb\043\017\001\002\000\006\004\022"
					+ "\021\015\001\002\000\004\030\021\001\002\000\046\002"
					+ "\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\015\ufffa\020\ufffa"
					+ "\021\ufffa\024\ufffa\025\ufffa\027\ufffa\031\ufffa\033\ufffa\034"
					+ "\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\001\002\000\046"
					+ "\010\ufff4\011\ufff4\012\ufff4\014\ufff4\015\ufff4\016\ufff4\017"
					+ "\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4"
					+ "\030\ufff4\032\ufff4\034\ufff4\035\024\043\ufff4\001\002\000"
					+ "\006\030\ufff8\043\ufff8\001\002\000\006\005\026\036\025"
					+ "\001\002\000\046\010\ufff2\011\ufff2\012\ufff2\014\ufff2\015"
					+ "\ufff2\016\ufff2\017\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2"
					+ "\025\ufff2\026\ufff2\027\ufff2\030\ufff2\032\ufff2\034\ufff2\043"
					+ "\ufff2\001\002\000\004\036\027\001\002\000\046\010\ufff1"
					+ "\011\ufff1\012\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\021"
					+ "\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1"
					+ "\030\ufff1\032\ufff1\034\ufff1\043\ufff1\001\002\000\046\010"
					+ "\ufff3\011\ufff3\012\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3"
					+ "\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027"
					+ "\ufff3\030\ufff3\032\ufff3\034\ufff3\043\ufff3\001\002\000\030"
					+ "\004\045\005\035\006\047\015\036\020\044\021\015\024"
					+ "\032\025\051\027\050\031\043\033\042\001\002\000\026"
					+ "\004\045\005\035\006\047\015\036\020\044\021\015\024"
					+ "\032\025\051\027\050\031\043\001\002\000\042\011\uffc3"
					+ "\012\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\021\uffc3\022"
					+ "\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\030\uffc3\032\uffc3"
					+ "\034\uffc3\043\uffc3\001\002\000\046\010\122\011\uffcb\012"
					+ "\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\021\uffcb\022\uffcb"
					+ "\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\121\030\uffcb\032"
					+ "\uffcb\034\uffcb\043\uffcb\001\002\000\042\011\uffbe\012\uffbe"
					+ "\014\uffbe\015\uffbe\016\uffbe\017\uffbe\021\uffbe\022\uffbe\023"
					+ "\uffbe\024\uffbe\025\uffbe\026\uffbe\030\uffbe\032\uffbe\034\uffbe"
					+ "\043\uffbe\001\002\000\004\004\120\001\002\000\042\011"
					+ "\uffc9\012\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\021\uffc9"
					+ "\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\030\uffc9\032"
					+ "\uffc9\034\uffc9\043\uffc9\001\002\000\006\030\ufff5\043\ufff5"
					+ "\001\002\000\030\015\065\016\057\017\060\021\063\022"
					+ "\062\023\056\024\061\025\055\026\064\030\ufff6\043\ufff6"
					+ "\001\002\000\026\004\045\005\035\006\047\015\036\020"
					+ "\044\021\015\024\032\025\051\027\050\031\043\001\002"
					+ "\000\026\004\045\005\035\006\047\015\036\020\044\021"
					+ "\015\024\032\025\051\027\050\031\043\001\002\000\026"
					+ "\004\045\005\035\006\047\015\036\020\044\021\015\024"
					+ "\032\025\051\027\050\031\043\001\002\000\052\010\ufff4"
					+ "\011\ufff4\012\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\021"
					+ "\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4"
					+ "\030\ufff4\031\uffbd\032\ufff4\034\ufff4\035\024\043\ufff4\001"
					+ "\002\000\042\011\uffc2\012\uffc2\014\uffc2\015\uffc2\016\uffc2"
					+ "\017\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026"
					+ "\uffc2\030\uffc2\032\uffc2\034\uffc2\043\uffc2\001\002\000\042"
					+ "\011\uffc1\012\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\021"
					+ "\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\030\uffc1"
					+ "\032\uffc1\034\uffc1\043\uffc1\001\002\000\006\004\022\021"
					+ "\015\001\002\000\026\004\045\005\035\006\047\015\036"
					+ "\020\044\021\015\024\032\025\051\027\050\031\043\001"
					+ "\002\000\042\011\uffc4\012\uffc4\014\uffc4\015\uffc4\016\uffc4"
					+ "\017\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026"
					+ "\uffc4\030\uffc4\032\uffc4\034\uffc4\043\uffc4\001\002\000\042"
					+ "\011\uffcc\012\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\021"
					+ "\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\030\uffcc"
					+ "\032\uffcc\034\uffcc\043\uffcc\001\002\000\042\011\uffc7\012"
					+ "\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\021\063\022\062"
					+ "\023\056\024\uffc7\025\uffc7\026\uffc7\030\uffc7\032\uffc7\034"
					+ "\uffc7\043\uffc7\001\002\000\026\004\045\005\035\006\047"
					+ "\015\036\020\044\021\015\024\032\025\051\027\050\031"
					+ "\043\001\002\000\026\004\045\005\035\006\047\015\036"
					+ "\020\044\021\015\024\032\025\051\027\050\031\043\001"
					+ "\002\000\026\004\045\005\035\006\047\015\036\020\044"
					+ "\021\015\024\032\025\051\027\050\031\043\001\002\000"
					+ "\026\004\045\005\035\006\047\015\036\020\044\021\015"
					+ "\024\032\025\051\027\050\031\043\001\002\000\026\004"
					+ "\045\005\035\006\047\015\036\020\044\021\015\024\032"
					+ "\025\051\027\050\031\043\001\002\000\026\004\045\005"
					+ "\035\006\047\015\036\020\044\021\015\024\032\025\051"
					+ "\027\050\031\043\001\002\000\026\004\045\005\035\006"
					+ "\047\015\036\020\044\021\015\024\032\025\051\027\050"
					+ "\031\043\001\002\000\026\004\045\005\035\006\047\015"
					+ "\036\020\044\021\015\024\032\025\051\027\050\031\043"
					+ "\001\002\000\026\004\045\005\035\006\047\015\036\020"
					+ "\044\021\015\024\032\025\051\027\050\031\043\001\002"
					+ "\000\042\011\uffd0\012\uffd0\014\uffd0\015\uffd0\016\uffd0\017"
					+ "\uffd0\021\063\022\062\023\056\024\061\025\055\026\uffd0"
					+ "\030\uffd0\032\uffd0\034\uffd0\043\uffd0\001\002\000\042\011"
					+ "\uffcd\012\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\021\063"
					+ "\022\062\023\056\024\061\025\055\026\uffcd\030\uffcd\032"
					+ "\uffcd\034\uffcd\043\uffcd\001\002\000\042\011\uffd2\012\uffd2"
					+ "\014\uffd2\015\uffd2\016\uffd2\017\uffd2\021\uffd2\022\uffd2\023"
					+ "\uffd2\024\uffd2\025\uffd2\026\uffd2\030\uffd2\032\uffd2\034\uffd2"
					+ "\043\uffd2\001\002\000\042\011\uffd3\012\uffd3\014\uffd3\015"
					+ "\uffd3\016\uffd3\017\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3"
					+ "\025\uffd3\026\uffd3\030\uffd3\032\uffd3\034\uffd3\043\uffd3\001"
					+ "\002\000\042\011\uffd5\012\uffd5\014\uffd5\015\uffd5\016\uffd5"
					+ "\017\uffd5\021\063\022\062\023\056\024\uffd5\025\uffd5\026"
					+ "\uffd5\030\uffd5\032\uffd5\034\uffd5\043\uffd5\001\002\000\042"
					+ "\011\uffce\012\uffce\014\uffce\015\uffce\016\uffce\017\uffce\021"
					+ "\063\022\062\023\056\024\061\025\055\026\uffce\030\uffce"
					+ "\032\uffce\034\uffce\043\uffce\001\002\000\042\011\uffcf\012"
					+ "\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\021\063\022\062"
					+ "\023\056\024\061\025\055\026\uffcf\030\uffcf\032\uffcf\034"
					+ "\uffcf\043\uffcf\001\002\000\042\011\uffd1\012\uffd1\014\uffd1"
					+ "\015\uffd1\016\uffd1\017\uffd1\021\uffd1\022\uffd1\023\uffd1\024"
					+ "\uffd1\025\uffd1\026\uffd1\030\uffd1\032\uffd1\034\uffd1\043\uffd1"
					+ "\001\002\000\042\011\uffd4\012\uffd4\014\uffd4\015\uffd4\016"
					+ "\uffd4\017\uffd4\021\063\022\062\023\056\024\uffd4\025\uffd4"
					+ "\026\uffd4\030\uffd4\032\uffd4\034\uffd4\043\uffd4\001\002\000"
					+ "\042\011\uffc0\012\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0"
					+ "\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\030"
					+ "\uffc0\032\uffc0\034\uffc0\043\uffc0\001\002\000\004\031\101"
					+ "\001\002\000\030\004\045\005\035\006\047\015\036\020"
					+ "\044\021\015\024\032\025\051\027\050\031\043\032\uffb3"
					+ "\001\002\000\030\015\065\016\057\017\060\021\063\022"
					+ "\062\023\056\024\061\025\055\026\064\032\uffb2\043\uffb2"
					+ "\001\002\000\006\032\uffb4\043\106\001\002\000\004\032"
					+ "\105\001\002\000\042\011\uffbc\012\uffbc\014\uffbc\015\uffbc"
					+ "\016\uffbc\017\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025"
					+ "\uffbc\026\uffbc\030\uffbc\032\uffbc\034\uffbc\043\uffbc\001\002"
					+ "\000\026\004\045\005\035\006\047\015\036\020\044\021"
					+ "\015\024\032\025\051\027\050\031\043\001\002\000\030"
					+ "\015\065\016\057\017\060\021\063\022\062\023\056\024"
					+ "\061\025\055\026\064\032\uffb1\043\uffb1\001\002\000\042"
					+ "\011\uffc5\012\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\021"
					+ "\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\030\uffc5"
					+ "\032\uffc5\034\uffc5\043\uffc5\001\002\000\026\015\065\016"
					+ "\057\017\060\021\063\022\062\023\056\024\061\025\055"
					+ "\026\064\032\112\001\002\000\042\011\uffc6\012\uffc6\014"
					+ "\uffc6\015\uffc6\016\uffc6\017\uffc6\021\uffc6\022\uffc6\023\uffc6"
					+ "\024\uffc6\025\uffc6\026\uffc6\030\uffc6\032\uffc6\034\uffc6\043"
					+ "\uffc6\001\002\000\030\015\065\016\057\017\060\021\063"
					+ "\022\062\023\056\024\061\025\055\026\064\034\uffef\043"
					+ "\uffef\001\002\000\006\034\116\043\115\001\002\000\026"
					+ "\004\045\005\035\006\047\015\036\020\044\021\015\024"
					+ "\032\025\051\027\050\031\043\001\002\000\006\030\ufff0"
					+ "\043\ufff0\001\002\000\030\015\065\016\057\017\060\021"
					+ "\063\022\062\023\056\024\061\025\055\026\064\034\uffee"
					+ "\043\uffee\001\002\000\042\011\uffca\012\uffca\014\uffca\015"
					+ "\uffca\016\uffca\017\uffca\021\uffca\022\uffca\023\uffca\024\uffca"
					+ "\025\uffca\026\uffca\030\uffca\032\uffca\034\uffca\043\uffca\001"
					+ "\002\000\042\011\uffbf\012\uffbf\014\uffbf\015\uffbf\016\uffbf"
					+ "\017\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026"
					+ "\uffbf\030\uffbf\032\uffbf\034\uffbf\043\uffbf\001\002\000\026"
					+ "\004\045\005\035\006\047\015\036\020\044\021\015\024"
					+ "\032\025\051\027\050\031\043\001\002\000\042\011\uffd6"
					+ "\012\uffd6\014\uffd6\015\065\016\057\017\060\021\063\022"
					+ "\062\023\056\024\061\025\055\026\064\030\uffd6\032\uffd6"
					+ "\034\uffd6\043\uffd6\001\002\000\042\011\uffc8\012\uffc8\014"
					+ "\uffc8\015\uffc8\016\uffc8\017\uffc8\021\063\022\062\023\056"
					+ "\024\uffc8\025\uffc8\026\uffc8\030\uffc8\032\uffc8\034\uffc8\043"
					+ "\uffc8\001\002\000\010\007\uffed\032\uffed\043\uffed\001\002"
					+ "\000\010\007\131\032\uffe9\043\uffe9\001\002\000\006\032"
					+ "\134\043\133\001\002\000\006\032\uffeb\043\uffeb\001\002"
					+ "\000\006\004\022\021\015\001\002\000\006\032\uffe8\043"
					+ "\uffe8\001\002\000\004\007\131\001\002\000\004\033\136"
					+ "\001\002\000\006\002\uffec\007\uffec\001\002\000\042\004"
					+ "\uffe7\005\uffe7\006\uffe7\007\uffe7\015\uffe7\020\uffe7\021\uffe7"
					+ "\024\uffe7\025\uffe7\027\uffe7\031\uffe7\033\uffe7\034\uffe7\037"
					+ "\uffe7\041\uffe7\042\uffe7\001\002\000\042\004\uffe3\005\uffe3"
					+ "\006\uffe3\007\uffe3\015\uffe3\020\uffe3\021\uffe3\024\uffe3\025"
					+ "\uffe3\027\uffe3\031\uffe3\033\uffe3\034\uffe3\037\uffe3\041\uffe3"
					+ "\042\uffe3\001\002\000\042\004\045\005\035\006\047\007"
					+ "\160\015\036\020\044\021\015\024\032\025\051\027\050"
					+ "\031\043\033\154\034\uffe6\037\153\041\144\042\147\001"
					+ "\002\000\044\004\uffdf\005\uffdf\006\uffdf\007\uffdf\015\uffdf"
					+ "\020\uffdf\021\uffdf\024\uffdf\025\uffdf\027\uffdf\031\uffdf\033"
					+ "\uffdf\034\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\001\002"
					+ "\000\042\004\uffe4\005\uffe4\006\uffe4\007\uffe4\015\uffe4\020"
					+ "\uffe4\021\uffe4\024\uffe4\025\uffe4\027\uffe4\031\uffe4\033\uffe4"
					+ "\034\uffe4\037\uffe4\041\uffe4\042\uffe4\001\002\000\044\004"
					+ "\uffde\005\uffde\006\uffde\007\uffde\015\uffde\020\uffde\021\uffde"
					+ "\024\uffde\025\uffde\027\uffde\031\uffde\033\uffde\034\uffde\037"
					+ "\uffde\040\uffde\041\uffde\042\uffde\001\002\000\004\031\225"
					+ "\001\002\000\044\004\uffdd\005\uffdd\006\uffdd\007\uffdd\015"
					+ "\uffdd\020\uffdd\021\uffdd\024\uffdd\025\uffdd\027\uffdd\031\uffdd"
					+ "\033\uffdd\034\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\001"
					+ "\002\000\004\034\224\001\002\000\026\004\045\005\035"
					+ "\006\047\015\036\020\044\021\015\024\032\025\051\027"
					+ "\050\031\043\001\002\000\026\015\uffc9\016\uffc9\017\uffc9"
					+ "\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\030"
					+ "\220\001\002\000\026\015\065\016\057\017\060\021\063"
					+ "\022\062\023\056\024\061\025\055\026\064\030\uffd9\001"
					+ "\002\000\044\004\uffe1\005\uffe1\006\uffe1\007\uffe1\015\uffe1"
					+ "\020\uffe1\021\uffe1\024\uffe1\025\uffe1\027\uffe1\031\uffe1\033"
					+ "\uffe1\034\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\001\002"
					+ "\000\004\031\175\001\002\000\042\004\uffa4\005\uffa4\006"
					+ "\uffa4\007\uffa4\015\uffa4\020\uffa4\021\uffa4\024\uffa4\025\uffa4"
					+ "\027\uffa4\031\uffa4\033\uffa4\034\uffa4\037\uffa4\041\uffa4\042"
					+ "\uffa4\001\002\000\044\004\uffdb\005\uffdb\006\uffdb\007\uffdb"
					+ "\015\uffdb\020\uffdb\021\uffdb\024\uffdb\025\uffdb\027\uffdb\031"
					+ "\uffdb\033\uffdb\034\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb"
					+ "\001\002\000\044\004\uffe0\005\uffe0\006\uffe0\007\uffe0\015"
					+ "\uffe0\020\uffe0\021\uffe0\024\uffe0\025\uffe0\027\uffe0\031\uffe0"
					+ "\033\uffe0\034\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\001"
					+ "\002\000\026\015\uffc2\016\uffc2\017\uffc2\021\uffc2\022\uffc2"
					+ "\023\uffc2\024\uffc2\025\uffc2\026\uffc2\030\170\001\002\000"
					+ "\006\004\022\021\015\001\002\000\044\004\uffaf\005\uffaf"
					+ "\006\uffaf\007\uffaf\015\uffaf\020\uffaf\021\uffaf\024\uffaf\025"
					+ "\uffaf\027\uffaf\031\uffaf\033\uffaf\034\uffaf\037\uffaf\040\165"
					+ "\041\uffaf\042\uffaf\001\002\000\044\004\uffda\005\uffda\006"
					+ "\uffda\007\uffda\015\uffda\020\uffda\021\uffda\024\uffda\025\uffda"
					+ "\027\uffda\031\uffda\033\uffda\034\uffda\037\uffda\040\uffda\041"
					+ "\uffda\042\uffda\001\002\000\044\004\uffe2\005\uffe2\006\uffe2"
					+ "\007\uffe2\015\uffe2\020\uffe2\021\uffe2\024\uffe2\025\uffe2\027"
					+ "\uffe2\031\uffe2\033\uffe2\034\uffe2\037\uffe2\040\uffe2\041\uffe2"
					+ "\042\uffe2\001\002\000\044\004\uffdc\005\uffdc\006\uffdc\007"
					+ "\uffdc\015\uffdc\020\uffdc\021\uffdc\024\uffdc\025\uffdc\027\uffdc"
					+ "\031\uffdc\033\uffdc\034\uffdc\037\uffdc\040\uffdc\041\uffdc\042"
					+ "\uffdc\001\002\000\040\004\uffae\005\uffae\006\uffae\007\uffae"
					+ "\015\uffae\020\uffae\021\uffae\024\uffae\025\uffae\027\uffae\031"
					+ "\uffae\033\uffae\037\uffae\041\uffae\042\uffae\001\002\000\040"
					+ "\004\045\005\035\006\047\007\160\015\036\020\044\021"
					+ "\015\024\032\025\051\027\050\031\043\033\154\037\153"
					+ "\041\144\042\147\001\002\000\044\004\uffad\005\uffad\006"
					+ "\uffad\007\uffad\015\uffad\020\uffad\021\uffad\024\uffad\025\uffad"
					+ "\027\uffad\031\uffad\033\uffad\034\uffad\037\uffad\040\uffad\041"
					+ "\uffad\042\uffad\001\002\000\044\004\uffd7\005\uffd7\006\uffd7"
					+ "\007\uffd7\015\uffd7\020\uffd7\021\uffd7\024\uffd7\025\uffd7\027"
					+ "\uffd7\031\uffd7\033\uffd7\034\uffd7\037\uffd7\040\uffd7\041\uffd7"
					+ "\042\uffd7\001\002\000\042\004\uffe3\005\uffe3\006\uffe3\007"
					+ "\uffe3\015\uffe3\020\uffe3\021\uffe3\024\uffe3\025\uffe3\027\uffe3"
					+ "\031\uffe3\033\uffe3\034\uffe3\037\uffe3\041\uffe3\042\uffe3\001"
					+ "\002\000\042\004\045\005\035\006\047\007\160\015\036"
					+ "\020\044\021\015\024\032\025\051\027\050\031\043\033"
					+ "\154\034\uffa3\037\153\041\144\042\147\001\002\000\004"
					+ "\034\174\001\002\000\044\004\uffa2\005\uffa2\006\uffa2\007"
					+ "\uffa2\015\uffa2\020\uffa2\021\uffa2\024\uffa2\025\uffa2\027\uffa2"
					+ "\031\uffa2\033\uffa2\034\uffa2\037\uffa2\040\uffa2\041\uffa2\042"
					+ "\uffa2\001\002\000\030\004\uffac\005\uffac\006\uffac\013\uffac"
					+ "\015\uffac\020\uffac\021\uffac\024\uffac\025\uffac\027\uffac\031"
					+ "\uffac\001\002\000\030\004\045\005\035\006\047\013\201"
					+ "\015\036\020\044\021\015\024\032\025\051\027\050\031"
					+ "\043\001\002\000\010\011\207\012\206\032\uffab\001\002"
					+ "\000\034\011\uffbb\012\uffbb\014\203\015\065\016\057\017"
					+ "\060\021\063\022\062\023\056\024\061\025\055\026\064"
					+ "\032\uffbb\001\002\000\026\004\045\005\035\006\047\015"
					+ "\036\020\044\021\015\024\032\025\051\027\050\031\043"
					+ "\001\002\000\032\011\uffba\012\uffba\015\065\016\057\017"
					+ "\060\021\063\022\062\023\056\024\061\025\055\026\064"
					+ "\032\uffba\001\002\000\026\004\045\005\035\006\047\015"
					+ "\036\020\044\021\015\024\032\025\051\027\050\031\043"
					+ "\001\002\000\032\011\uffb9\012\uffb9\015\065\016\057\017"
					+ "\060\021\063\022\062\023\056\024\061\025\055\026\064"
					+ "\032\uffb9\001\002\000\004\032\214\001\002\000\030\004"
					+ "\uffb6\005\uffb6\006\uffb6\013\uffb6\015\uffb6\020\uffb6\021\uffb6"
					+ "\024\uffb6\025\uffb6\027\uffb6\031\uffb6\001\002\000\030\004"
					+ "\uffb8\005\uffb8\006\uffb8\013\uffb8\015\uffb8\020\uffb8\021\uffb8"
					+ "\024\uffb8\025\uffb8\027\uffb8\031\uffb8\001\002\000\030\004"
					+ "\045\005\035\006\047\013\201\015\036\020\044\021\015"
					+ "\024\032\025\051\027\050\031\043\001\002\000\010\011"
					+ "\uffb7\012\uffb7\032\uffb7\001\002\000\030\004\045\005\035"
					+ "\006\047\013\201\015\036\020\044\021\015\024\032\025"
					+ "\051\027\050\031\043\001\002\000\010\011\uffb5\012\uffb5"
					+ "\032\uffb5\001\002\000\040\004\045\005\035\006\047\007"
					+ "\160\015\036\020\044\021\015\024\032\025\051\027\050"
					+ "\031\043\033\154\037\153\041\144\042\147\001\002\000"
					+ "\044\004\uffaa\005\uffaa\006\uffaa\007\uffaa\015\uffaa\020\uffaa"
					+ "\021\uffaa\024\uffaa\025\uffaa\027\uffaa\031\uffaa\033\uffaa\034"
					+ "\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\001\002\000\004"
					+ "\030\217\001\002\000\044\004\uffd8\005\uffd8\006\uffd8\007"
					+ "\uffd8\015\uffd8\020\uffd8\021\uffd8\024\uffd8\025\uffd8\027\uffd8"
					+ "\031\uffd8\033\uffd8\034\uffd8\037\uffd8\040\uffd8\041\uffd8\042"
					+ "\uffd8\001\002\000\044\004\uffb0\005\uffb0\006\uffb0\007\uffb0"
					+ "\015\uffb0\020\uffb0\021\uffb0\024\uffb0\025\uffb0\027\uffb0\031"
					+ "\uffb0\033\uffb0\034\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0"
					+ "\001\002\000\026\015\065\016\057\017\060\021\063\022"
					+ "\062\023\056\024\061\025\055\026\064\030\uffa6\001\002"
					+ "\000\004\030\223\001\002\000\044\004\uffa5\005\uffa5\006"
					+ "\uffa5\007\uffa5\015\uffa5\020\uffa5\021\uffa5\024\uffa5\025\uffa5"
					+ "\027\uffa5\031\uffa5\033\uffa5\034\uffa5\037\uffa5\040\uffa5\041"
					+ "\uffa5\042\uffa5\001\002\000\006\002\uffe5\007\uffe5\001\002"
					+ "\000\030\004\uffa9\005\uffa9\006\uffa9\013\uffa9\015\uffa9\020"
					+ "\uffa9\021\uffa9\024\uffa9\025\uffa9\027\uffa9\031\uffa9\001\002"
					+ "\000\030\004\045\005\035\006\047\013\201\015\036\020"
					+ "\044\021\015\024\032\025\051\027\050\031\043\001\002"
					+ "\000\010\011\207\012\206\032\uffa8\001\002\000\004\032"
					+ "\231\001\002\000\040\004\045\005\035\006\047\007\160"
					+ "\015\036\020\044\021\015\024\032\025\051\027\050\031"
					+ "\043\033\154\037\153\041\144\042\147\001\002\000\044"
					+ "\004\uffa7\005\uffa7\006\uffa7\007\uffa7\015\uffa7\020\uffa7\021"
					+ "\uffa7\024\uffa7\025\uffa7\027\uffa7\031\uffa7\033\uffa7\034\uffa7"
					+ "\037\uffa7\040\uffa7\041\uffa7\042\uffa7\001\002\000\006\032"
					+ "\uffea\043\uffea\001\002\000\006\002\ufffe\007\ufffe\001\002" + "\000\004\002\001\001\002" });

	/** Access to parse-action table. */
	public short[][] action_table() {
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(
			new String[] { "\000\233\000\014\017\004\020\003\021\005\042\010\043"
					+ "\006\001\001\000\002\001\001\000\002\001\001\000\002"
					+ "\001\001\000\010\020\003\021\005\042\233\001\001\000"
					+ "\010\003\013\012\012\013\015\001\001\000\002\001\001"
					+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
					+ "\002\001\001\000\004\044\017\001\001\000\006\003\013"
					+ "\012\022\001\001\000\002\001\001\000\002\001\001\000"
					+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
					+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
					+ "\001\000\022\003\033\004\051\005\032\006\045\007\040"
					+ "\010\052\011\036\015\037\001\001\000\020\003\033\004"
					+ "\051\005\032\006\045\007\123\010\052\011\036\001\001"
					+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
					+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
					+ "\001\001\000\022\003\033\004\051\005\032\006\045\007"
					+ "\112\010\052\011\036\014\113\001\001\000\020\003\033"
					+ "\004\051\005\032\006\045\007\110\010\052\011\036\001"
					+ "\001\000\020\003\033\004\051\005\032\006\045\007\107"
					+ "\010\052\011\036\001\001\000\004\051\077\001\001\000"
					+ "\002\001\001\000\002\001\001\000\004\003\076\001\001"
					+ "\000\020\003\033\004\051\005\032\006\045\007\053\010"
					+ "\052\011\036\001\001\000\002\001\001\000\002\001\001"
					+ "\000\002\001\001\000\020\003\033\004\051\005\032\006"
					+ "\045\007\075\010\052\011\036\001\001\000\020\003\033"
					+ "\004\051\005\032\006\045\007\074\010\052\011\036\001"
					+ "\001\000\020\003\033\004\051\005\032\006\045\007\073"
					+ "\010\052\011\036\001\001\000\020\003\033\004\051\005"
					+ "\032\006\045\007\072\010\052\011\036\001\001\000\020"
					+ "\003\033\004\051\005\032\006\045\007\071\010\052\011"
					+ "\036\001\001\000\020\003\033\004\051\005\032\006\045"
					+ "\007\070\010\052\011\036\001\001\000\020\003\033\004"
					+ "\051\005\032\006\045\007\067\010\052\011\036\001\001"
					+ "\000\020\003\033\004\051\005\032\006\045\007\066\010"
					+ "\052\011\036\001\001\000\020\003\033\004\051\005\032"
					+ "\006\045\007\065\010\052\011\036\001\001\000\002\001"
					+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
					+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
					+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
					+ "\001\001\000\024\003\033\004\051\005\032\006\045\007"
					+ "\101\010\052\011\036\031\103\032\102\001\001\000\002"
					+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
					+ "\001\000\020\003\033\004\051\005\032\006\045\007\106"
					+ "\010\052\011\036\001\001\000\002\001\001\000\002\001"
					+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
					+ "\000\002\001\001\000\020\003\033\004\051\005\032\006"
					+ "\045\007\116\010\052\011\036\001\001\000\002\001\001"
					+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
					+ "\020\003\033\004\051\005\032\006\045\007\122\010\052"
					+ "\011\036\001\001\000\002\001\001\000\002\001\001\000"
					+ "\004\045\125\001\001\000\006\022\127\023\126\001\001"
					+ "\000\002\001\001\000\002\001\001\000\004\003\131\001"
					+ "\001\000\002\001\001\000\004\022\232\001\001\000\004"
					+ "\024\134\001\001\000\002\001\001\000\004\046\136\001"
					+ "\001\000\004\025\137\001\001\000\050\003\033\004\051"
					+ "\005\032\006\156\007\150\010\052\011\147\020\161\026"
					+ "\162\027\141\030\151\033\140\034\142\035\160\036\144"
					+ "\037\163\040\154\041\155\047\145\001\001\000\002\001"
					+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
					+ "\000\002\001\001\000\002\001\001\000\020\003\033\004"
					+ "\051\005\032\006\045\007\220\010\052\011\036\001\001"
					+ "\000\002\001\001\000\004\050\215\001\001\000\002\001"
					+ "\001\000\002\001\001\000\004\062\170\001\001\000\002"
					+ "\001\001\000\002\001\001\000\002\001\001\000\010\003"
					+ "\013\012\012\013\015\001\001\000\002\001\001\000\002"
					+ "\001\001\000\002\001\001\000\002\001\001\000\004\054"
					+ "\165\001\001\000\046\003\033\004\051\005\032\006\156"
					+ "\007\150\010\052\011\147\020\161\026\162\027\166\030"
					+ "\151\033\140\034\142\035\160\036\144\037\163\040\154"
					+ "\041\155\001\001\000\002\001\001\000\002\001\001\000"
					+ "\004\025\171\001\001\000\050\003\033\004\051\005\032"
					+ "\006\156\007\150\010\052\011\147\020\161\026\162\027"
					+ "\141\030\151\033\140\034\142\035\160\036\144\037\163"
					+ "\040\154\041\155\063\172\001\001\000\002\001\001\000"
					+ "\002\001\001\000\004\055\175\001\001\000\022\003\033"
					+ "\004\051\005\032\006\045\007\177\010\052\011\036\016"
					+ "\176\001\001\000\004\056\204\001\001\000\002\001\001"
					+ "\000\020\003\033\004\051\005\032\006\045\007\201\010"
					+ "\052\011\036\001\001\000\002\001\001\000\020\003\033"
					+ "\004\051\005\032\006\045\007\203\010\052\011\036\001"
					+ "\001\000\002\001\001\000\002\001\001\000\004\053\211"
					+ "\001\001\000\004\052\207\001\001\000\022\003\033\004"
					+ "\051\005\032\006\045\007\177\010\052\011\036\016\210"
					+ "\001\001\000\002\001\001\000\022\003\033\004\051\005"
					+ "\032\006\045\007\177\010\052\011\036\016\212\001\001"
					+ "\000\002\001\001\000\046\003\033\004\051\005\032\006"
					+ "\156\007\150\010\052\011\147\020\161\026\162\027\214"
					+ "\030\151\033\140\034\142\035\160\036\144\037\163\040"
					+ "\154\041\155\001\001\000\002\001\001\000\002\001\001"
					+ "\000\002\001\001\000\002\001\001\000\004\061\221\001"
					+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
					+ "\000\004\057\225\001\001\000\022\003\033\004\051\005"
					+ "\032\006\045\007\177\010\052\011\036\016\226\001\001"
					+ "\000\004\060\227\001\001\000\002\001\001\000\046\003"
					+ "\033\004\051\005\032\006\156\007\150\010\052\011\147"
					+ "\020\161\026\162\027\231\030\151\033\140\034\142\035"
					+ "\160\036\144\037\163\040\154\041\155\001\001\000\002"
					+ "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001" });

	/** Access to <code>reduce_goto</code> table. */
	public short[][] reduce_table() {
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$parser$actions action_obj;

	/** Action encapsulation object initializer. */
	protected void init_actions() {
		action_obj = new CUP$parser$actions(this);
	}

	/** Invoke a user supplied parse action. */
	public java_cup.runtime.Symbol do_action(int act_num, java_cup.runtime.lr_parser parser, java.util.Stack stack,
			int top) throws java.lang.Exception {
		/* call code in generated class */
		return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
	}

	/** Indicates start state. */
	public int start_state() {
		return 0;
	}

	/** Indicates start production. */
	public int start_production() {
		return 0;
	}

	/** <code>EOF</code> Symbol index. */
	public int EOF_sym() {
		return 0;
	}

	/** <code>error</code> Symbol index. */
	public int error_sym() {
		return 1;
	}

	/**
	 * @deprecated Please use {@link parser#parse(String)}.
	 */
	@Override
	@Deprecated
	public Symbol parse() throws ParserException {
		throw new UnsupportedOperationException("parse() is no longer supported. Please use parser#parse(String)");
	}

	/**
	 * This method provides the main parsing routine. It returns only when
	 * done_parsing() has been called (typically because the parser has
	 * accepted, or a fatal error has been reported). See the header
	 * documentation of the {@link lr_parser} for the class regarding how
	 * shift/reduce parsers operate and how the various tables are used.
	 * 
	 * @param cCode
	 *            c-code to compile
	 * @return last symbol processed by reduce
	 */
	public Program parse(final String cCode) throws ParserException {
		if (cCode == null) {
			return new Program();
		}
		try (final InputStream is = new ByteArrayInputStream(cCode.getBytes());
				final BufferedReader br = new BufferedReader(new InputStreamReader(is))) {
			setScanner(new Yylex(br));
			super.parse();
			return getProgram();
		} catch (Exception e) {
			throw new ParserException(e, getScannerCurrentLineNo());
		}
	}

	@Override
	public void report_fatal_error(final String message, final Object info) throws Exception {
		throw new ParserException("Syntax error on token '" + getScannerLastToken() + "'", getScannerCurrentLineNo());
	}

	public static void main(String args[]) throws Exception {
		String fname = "./src/main/java/com/ctoassembly/compiler/test.c";
		final String cname = fname.substring(0, fname.length() - 2);
		String content = new String(Files.readAllBytes(Paths.get(fname)));
		final parser parser = new parser();
		parser.parse(content);
		try (final FileOutputStream out = new FileOutputStream(cname + ".asm")) {
			out.write(parser.getProgram().asText().getBytes());
		}
	}

	public Program getProgram() {
		return action_obj.getProgram();
	}

	/**
	 * Returns the line number of a line of c code that is currently being
	 * parsed.
	 */
	/* default */ Integer getScannerCurrentLineNo() {
		return ((Yylex) getScanner()).getLineNo();
	}

	/* default */ String getScannerLastToken() {
		return ((Yylex) getScanner()).getLastToken();
	}

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$parser$actions {

	private final Registers fRegisters = new Registers();
	private final Codegen fCodegen = new Codegen(fRegisters, new LexLineNoResolver() {
		@Override
		public Integer getCurrentCodeLineNo() {
			return parser.getScannerCurrentLineNo();
		}
	});
	/**
	 * Current context (scope) of a c code
	 */
	private Context fContext = new Context(fCodegen);

	public Program getProgram() {
		return fCodegen.getProgram();
	}

	private final parser parser;

	/** Constructor */
	CUP$parser$actions(parser parser) {
		this.parser = parser;
	}

	/** Method with the actual generated action code. */
	public final java_cup.runtime.Symbol CUP$parser$do_action(int CUP$parser$act_num,
			java_cup.runtime.lr_parser CUP$parser$parser, java.util.Stack CUP$parser$stack, int CUP$parser$top)
			throws java.lang.Exception {
		/* Symbol object for return from actions */
		java_cup.runtime.Symbol CUP$parser$result;

		/* select the action based on the action number */
		switch (CUP$parser$act_num) {
		/* . . . . . . . . . . . . . . . . . . . . */
		case 95: // compound_statement ::= LBRACKET NT$14 statement_list NT$15
					// RBRACKET
		{
			Object RESULT = null;
			// propagate RESULT from NT$14
			if (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value != null)
				RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
			// propagate RESULT from NT$15
			if (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value != null)
				RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;

			CUP$parser$result = new java_cup.runtime.Symbol(30/* compound_statement */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 94: // NT$15 ::=
		{
			Object RESULT = null;

			fContext.enterParentScope();

			CUP$parser$result = new java_cup.runtime.Symbol(49/* NT$15 */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 93: // NT$14 ::=
		{
			Object RESULT = null;

			fContext.enterChildScope();

			CUP$parser$result = new java_cup.runtime.Symbol(48/* NT$14 */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 92: // return_statement ::= RETURN exp NT$13 SEMICOLON
		{
			Object RESULT = null;
			// propagate RESULT from NT$13
			if (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value != null)
				RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			SymTabEntry e = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;

			CUP$parser$result = new java_cup.runtime.Symbol(29/* return_statement */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 91: // NT$13 ::=
		{
			Object RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry e = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			Semantic.assertTypes(fContext.fFunction.getType(), e.getType(),
					"return statement of function: " + fContext.fFunction.getName());

			fCodegen.genMov(e, fRegisters.getFunctionReturnRegister());
			fCodegen.genReturn(fContext.fFunction.getName() + "_exit");

			CUP$parser$result = new java_cup.runtime.Symbol(47/* NT$13 */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 90: // while_statement ::= WHILE LPAREN NT$11 log_exp NT$12 RPAREN
					// statement
		{
			Object RESULT = null;
			// propagate RESULT from NT$11
			if (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value != null)
				RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
			// propagate RESULT from NT$12
			if (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value != null)
				RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
			Integer e = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;

			fContext.fLabNum = fContext.fLabelStack.pop();

			fCodegen.genJumpToNumLab(Definitions.UNCONDITIONAL_JUMP, "while", fContext.fLabNum);
			fCodegen.genNumLab("false", fContext.fLabelStack.pop());
			fCodegen.genNumLab("exit", fContext.fLabNum);

			CUP$parser$result = new java_cup.runtime.Symbol(28/* while_statement */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 89: // NT$12 ::=
		{
			Object RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			Integer e = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;

			fCodegen.genJumpToNumLab(Definitions.OPPOSITE_JUMPS[e], "false", fContext.fFalseLabNum);
			fCodegen.genNumLab("true", fContext.fFalseLabNum);

			fContext.fLabelStack.push(fContext.fFalseLabNum);
			fContext.fLabelStack.push(fContext.fLabNum);

			CUP$parser$result = new java_cup.runtime.Symbol(46/* NT$12 */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 88: // NT$11 ::=
		{
			Object RESULT = null;

			fContext.fLabNum = ++fContext.fFalseLabNum;

			fCodegen.genNumLab("while", fContext.fLabNum);

			CUP$parser$result = new java_cup.runtime.Symbol(45/* NT$11 */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 87: // if_part ::= IF LPAREN NT$9 log_exp NT$10 RPAREN statement
		{
			Object RESULT = null;
			// propagate RESULT from NT$9
			if (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value != null)
				RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
			// propagate RESULT from NT$10
			if (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value != null)
				RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
			Integer e = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;

			fContext.fLabNum = fContext.fLabelStack.pop();
			// A hack! See the description for an explanation.
			fCodegen.decLexLineNoModifier();
			fCodegen.genJumpToNumLab(Definitions.UNCONDITIONAL_JUMP, "exit", fContext.fLabNum);
			fCodegen.genNumLab("false", fContext.fLabelStack.pop());
			// A hack! See the description for an explanation.
			fCodegen.incLexLineNoModifier();

			CUP$parser$result = new java_cup.runtime.Symbol(27/* if_part */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 86: // NT$10 ::=
		{
			Object RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			Integer e = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;

			fCodegen.genJumpToNumLab(Definitions.OPPOSITE_JUMPS[e], "false", fContext.fFalseLabNum);
			fCodegen.genNumLab("true", fContext.fLabNum);

			fContext.fLabelStack.push(fContext.fFalseLabNum);
			fContext.fLabelStack.push(fContext.fLabNum);

			CUP$parser$result = new java_cup.runtime.Symbol(44/* NT$10 */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 85: // NT$9 ::=
		{
			Object RESULT = null;

			fContext.fLabNum = ++fContext.fFalseLabNum;

			fCodegen.genNumLab("if", fContext.fLabNum);

			CUP$parser$result = new java_cup.runtime.Symbol(43/* NT$9 */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 84: // if_statement ::= if_part ELSE NT$8 statement
		{
			Object RESULT = null;
			// propagate RESULT from NT$8
			if (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value != null)
				RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;

			fCodegen.genNumLab("exit", fContext.fLabelStack.pop());

			CUP$parser$result = new java_cup.runtime.Symbol(26/* if_statement */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 83: // NT$8 ::=
		{
			Object RESULT = null;

			fContext.fLabelStack.push(fContext.fLabNum);

			CUP$parser$result = new java_cup.runtime.Symbol(42/* NT$8 */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 82: // if_statement ::= if_part
		{
			Object RESULT = null;

			fCodegen.genNumLab("exit", fContext.fLabNum);

			CUP$parser$result = new java_cup.runtime.Symbol(26/* if_statement */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 81: // function_call_statement ::= function_call SEMICOLON
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(25/* function_call_statement */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 80: // argument_list ::= argument_list COMMA exp
		{
			Object RESULT = null;
			int expleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int expright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry exp = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			Semantic.assertArgumentType(fContext.getFunction(fContext.fFunctionCallName), exp, fContext.fArgNum);

			fContext.fArgNum++;
			fContext.fArgumentStack.push(exp);

			CUP$parser$result = new java_cup.runtime.Symbol(24/* argument_list */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 79: // argument_list ::= exp
		{
			Object RESULT = null;
			int expleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int expright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry exp = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			fContext.fArgumentCallStack.push(fContext.fArgNum);

			Semantic.assertArgumentType(fContext.getFunction(fContext.fFunctionCallName), exp, fContext.fArgNum);

			fContext.fArgNum++;
			fContext.fArgumentStack.push(exp);

			CUP$parser$result = new java_cup.runtime.Symbol(24/* argument_list */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 78: // arguments ::=
		{
			Object RESULT = null;

			fContext.fArgumentCallStack.push(fContext.fArgNum);
			fContext.fArgNum = 0;

			CUP$parser$result = new java_cup.runtime.Symbol(23/* arguments */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 77: // arguments ::= argument_list
		{
			Object RESULT = null;

			int args = fContext.fArgNum;
			while (args-- > 0) {
				fCodegen.genPush(fContext.fArgumentStack.pop());
			}

			CUP$parser$result = new java_cup.runtime.Symbol(23/* arguments */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 76: // log_exp ::= log_exp LOG_OR NT$7 log_exp
		{
			Integer RESULT = null;
			// propagate RESULT from NT$7
			if (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value != null)
				RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
			Integer e1 = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			Integer e2 = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;

			RESULT = e2;

			CUP$parser$result = new java_cup.runtime.Symbol(12/* log_exp */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 75: // NT$7 ::=
		{
			Object RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			Integer e1 = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;

			fCodegen.genJumpToNumLab(Definitions.JUMPS[e1], "true", fContext.fLabNum);
			fCodegen.genNumLab("false", fContext.fFalseLabNum);

			fContext.fFalseLabNum++;

			CUP$parser$result = new java_cup.runtime.Symbol(41/* NT$7 */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 74: // log_exp ::= log_exp LOG_AND NT$6 log_exp
		{
			Integer RESULT = null;
			// propagate RESULT from NT$6
			if (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value != null)
				RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
			Integer e1 = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			Integer e2 = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;

			RESULT = e2;

			CUP$parser$result = new java_cup.runtime.Symbol(12/* log_exp */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 73: // NT$6 ::=
		{
			Object RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			Integer e1 = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;

			fCodegen.genJumpToNumLab(Definitions.OPPOSITE_JUMPS[e1], "false", fContext.fFalseLabNum);

			CUP$parser$result = new java_cup.runtime.Symbol(40/* NT$6 */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 72: // log_exp ::= exp RELOP exp
		{
			Integer RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			SymTabEntry e1 = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int relopleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int relopright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			Integer relop = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry e2 = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			Semantic.assertTypes(e1.getType(), e2.getType(), "relation operator");

			fCodegen.genCmp(e1, e2);
			RESULT = relop;

			CUP$parser$result = new java_cup.runtime.Symbol(12/* log_exp */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 71: // log_exp ::= NOT_LOG_OP exp
		{
			Integer RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry e = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			final SymTabEntry zero = new SymTabEntry("0", e.getType());
			fCodegen.genCmp(e, zero);
			RESULT = Definitions.EQ;

			CUP$parser$result = new java_cup.runtime.Symbol(12/* log_exp */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 70: // log_exp ::= exp
		{
			Integer RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry e = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			final SymTabEntry zero = new SymTabEntry("0", e.getType());
			fCodegen.genCmp(e, zero);
			RESULT = Definitions.NE;

			CUP$parser$result = new java_cup.runtime.Symbol(12/* log_exp */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 69: // function_call ::= ID NT$5 LPAREN arguments RPAREN
		{
			SymTabEntry RESULT = null;
			// propagate RESULT from NT$5
			if (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value != null)
				RESULT = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
			int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;
			int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;
			String id = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;

			final Function function = fContext.getFunction(fContext.fFunctionCallName);
			Semantic.assertArgumentsNumber(function, fContext.fArgNum);

			fCodegen.genFunctionCall(function);
			fCodegen.genClearLocVar(fContext.fArgNum);
			fCodegen.genRegRestore();

			fContext.fArgNum = fContext.fArgumentCallStack.pop();
			fContext.fFunctionCallName = fContext.fFunctionCallStack.pop();

			RESULT = function;

			CUP$parser$result = new java_cup.runtime.Symbol(7/* function_call */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 68: // NT$5 ::=
		{
			Object RESULT = null;
			int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			String id = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;

			final SymTabEntry function = fContext.getFunction(id);

			fContext.fFunctionCallStack.push(function.getName());
			fContext.fFunctionCallName = function.getName();

			fCodegen.genRegSave();

			CUP$parser$result = new java_cup.runtime.Symbol(39/* NT$5 */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 67: // constant ::= INT_NUMBER
		{
			SymTabEntry RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			String c = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;

			RESULT = fContext.insertConstant(Integer.decode(c));
			RESULT.setType(new SimpleType(Definitions.INT_TYPE));

			CUP$parser$result = new java_cup.runtime.Symbol(3/* constant */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 66: // inc_dec_exp ::= identifier INCDEC
		{
			SymTabEntry RESULT = null;
			int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			SymTabEntry id = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int opleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int opright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			Integer op = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;

			final SymTabEntry originalVariable = fContext.getVariable(id.getName());
			id.setAttribute(originalVariable.getAttribute());
			id.setKind(originalVariable.getKind());
			id.getType().setInnerType(originalVariable.getType().getInnerType());
			id.setPointee(originalVariable);

			fContext.fIncDecQueue.add(new IncDecDescriptor(id, op, parser.getScannerCurrentLineNo()));
			RESULT = id;

			CUP$parser$result = new java_cup.runtime.Symbol(2/* inc_dec_exp */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 65: // inc_dec_exp ::= INCDEC identifier
		{
			SymTabEntry RESULT = null;
			int opleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int opright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			Integer op = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry id = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			final SymTabEntry originalVariable = fContext.getVariable(id.getName());
			id.setAttribute(originalVariable.getAttribute());
			id.setKind(originalVariable.getKind());
			id.getType().setInnerType(originalVariable.getType().getInnerType());
			id.setPointee(originalVariable);

			fCodegen.genIncDec(id, op);
			RESULT = id;

			CUP$parser$result = new java_cup.runtime.Symbol(2/* inc_dec_exp */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 64: // exp ::= STRING
		{
			SymTabEntry RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;

			RESULT = fCodegen.genString(s);

			CUP$parser$result = new java_cup.runtime.Symbol(5/* exp */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 63: // exp ::= assignment_exp
		{
			SymTabEntry RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry e = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			RESULT = e;

			CUP$parser$result = new java_cup.runtime.Symbol(5/* exp */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 62: // exp ::= constant
		{
			SymTabEntry RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry c = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			RESULT = c;

			CUP$parser$result = new java_cup.runtime.Symbol(5/* exp */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 61: // exp ::= inc_dec_exp
		{
			SymTabEntry RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry e = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			RESULT = e;

			CUP$parser$result = new java_cup.runtime.Symbol(5/* exp */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 60: // exp ::= NOT_OP exp
		{
			SymTabEntry RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry e = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			RESULT = fCodegen.genNot(e);

			CUP$parser$result = new java_cup.runtime.Symbol(5/* exp */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 59: // exp ::= LPAREN exp RPAREN
		{
			SymTabEntry RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			SymTabEntry e = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;

			RESULT = e;

			CUP$parser$result = new java_cup.runtime.Symbol(5/* exp */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 58: // exp ::= MINUS exp
		{
			SymTabEntry RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry e = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			RESULT = fCodegen.genUnaryMinus(e);

			CUP$parser$result = new java_cup.runtime.Symbol(5/* exp */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 57: // exp ::= PLUS exp
		{
			SymTabEntry RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry e = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			RESULT = e;

			CUP$parser$result = new java_cup.runtime.Symbol(5/* exp */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 56: // exp ::= function_call
		{
			SymTabEntry RESULT = null;
			int functionleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int functionright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry function = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			final SymTabEntry functionRegister = fRegisters.getFunctionReturnRegister();
			functionRegister.setType(function.getType());
			RESULT = functionRegister;

			CUP$parser$result = new java_cup.runtime.Symbol(5/* exp */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 55: // exp ::= AND_OP ID
		{
			SymTabEntry RESULT = null;
			int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			String id = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;

			final SymTabEntry variable = fContext.getVariable(id);
			RESULT = fCodegen.genLea(variable);

			CUP$parser$result = new java_cup.runtime.Symbol(5/* exp */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 54: // exp ::= identifier
		{
			SymTabEntry RESULT = null;
			int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry id = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			final SymTabEntry originalVariable = fContext.getVariable(id.getName());
			id.setAttribute(originalVariable.getAttribute());
			id.setKind(originalVariable.getKind());
			id.getType().setInnerType(originalVariable.getType().getInnerType());
			id.setPointee(originalVariable);

			RESULT = fCodegen.genMovToRegister(id);

			CUP$parser$result = new java_cup.runtime.Symbol(5/* exp */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 53: // exp ::= binary_exp
		{
			SymTabEntry RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry e = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			RESULT = e;

			CUP$parser$result = new java_cup.runtime.Symbol(5/* exp */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 52: // binary_exp ::= exp SHIFT exp
		{
			SymTabEntry RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			SymTabEntry e1 = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int opleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int opright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			Integer op = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry e2 = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			Semantic.assertTypes(e1.getType(), e2.getType(), "binary " + Definitions.OP_TOKEN[op]);
			Semantic.assertValidOperandPointerLevel(e1, e2, op, "binary " + Definitions.OP_TOKEN[op], fContext);

			RESULT = fCodegen.genArith(op, e1, e2);

			CUP$parser$result = new java_cup.runtime.Symbol(6/* binary_exp */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 51: // binary_exp ::= exp XOR_OP exp
		{
			SymTabEntry RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			SymTabEntry e1 = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int opleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int opright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			Integer op = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry e2 = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			Semantic.assertTypes(e1.getType(), e2.getType(), "binary " + Definitions.OP_TOKEN[op]);
			Semantic.assertValidOperandPointerLevel(e1, e2, op, "binary " + Definitions.OP_TOKEN[op], fContext);

			RESULT = fCodegen.genArith(op, e1, e2);

			CUP$parser$result = new java_cup.runtime.Symbol(6/* binary_exp */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 50: // binary_exp ::= exp OR_OP exp
		{
			SymTabEntry RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			SymTabEntry e1 = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int opleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int opright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			Integer op = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry e2 = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			Semantic.assertTypes(e1.getType(), e2.getType(), "binary " + Definitions.OP_TOKEN[op]);
			Semantic.assertValidOperandPointerLevel(e1, e2, op, "binary " + Definitions.OP_TOKEN[op], fContext);

			RESULT = fCodegen.genArith(op, e1, e2);

			CUP$parser$result = new java_cup.runtime.Symbol(6/* binary_exp */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 49: // binary_exp ::= exp AND_OP exp
		{
			SymTabEntry RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			SymTabEntry e1 = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int opleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int opright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			Integer op = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry e2 = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			Semantic.assertTypes(e1.getType(), e2.getType(), "binary " + Definitions.OP_TOKEN[op]);
			Semantic.assertValidOperandPointerLevel(e1, e2, op, "binary " + Definitions.OP_TOKEN[op], fContext);

			RESULT = fCodegen.genArith(op, e1, e2);

			CUP$parser$result = new java_cup.runtime.Symbol(6/* binary_exp */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 48: // binary_exp ::= exp MOD exp
		{
			SymTabEntry RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			SymTabEntry e1 = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int opleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int opright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			Integer op = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry e2 = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			Semantic.assertTypes(e1.getType(), e2.getType(), "binary " + Definitions.OP_TOKEN[op]);
			Semantic.assertValidOperandPointerLevel(e1, e2, op, "binary " + Definitions.OP_TOKEN[op], fContext);

			RESULT = fCodegen.genArith(op, e1, e2);

			CUP$parser$result = new java_cup.runtime.Symbol(6/* binary_exp */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 47: // binary_exp ::= exp MUL exp
		{
			SymTabEntry RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			SymTabEntry e1 = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int opleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int opright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			Integer op = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry e2 = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			Semantic.assertTypes(e1.getType(), e2.getType(), "binary " + Definitions.OP_TOKEN[op]);
			Semantic.assertValidOperandPointerLevel(e1, e2, op, "binary " + Definitions.OP_TOKEN[op], fContext);

			RESULT = fCodegen.genArith(op, e1, e2);

			CUP$parser$result = new java_cup.runtime.Symbol(6/* binary_exp */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 46: // binary_exp ::= exp DIV exp
		{
			SymTabEntry RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			SymTabEntry e1 = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int opleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int opright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			Integer op = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry e2 = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			Semantic.assertTypes(e1.getType(), e2.getType(), "binary " + Definitions.OP_TOKEN[op]);
			Semantic.assertValidOperandPointerLevel(e1, e2, op, "binary " + Definitions.OP_TOKEN[op], fContext);

			RESULT = fCodegen.genArith(op, e1, e2);

			CUP$parser$result = new java_cup.runtime.Symbol(6/* binary_exp */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 45: // binary_exp ::= exp MINUS exp
		{
			SymTabEntry RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			SymTabEntry e1 = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int opleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int opright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			Integer op = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry e2 = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			Semantic.assertTypes(e1.getType(), e2.getType(), "binary " + Definitions.OP_TOKEN[op]);
			Semantic.assertValidOperandPointerLevel(e1, e2, op, "binary " + Definitions.OP_TOKEN[op], fContext);

			RESULT = fCodegen.genArith(op, e1, e2);

			CUP$parser$result = new java_cup.runtime.Symbol(6/* binary_exp */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 44: // binary_exp ::= exp PLUS exp
		{
			SymTabEntry RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			SymTabEntry e1 = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int opleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int opright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			Integer op = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry e2 = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			Semantic.assertTypes(e1.getType(), e2.getType(), "binary " + Definitions.OP_TOKEN[op]);
			Semantic.assertValidOperandPointerLevel(e1, e2, op, "binary " + Definitions.OP_TOKEN[op], fContext);

			RESULT = fCodegen.genArith(op, e1, e2);

			CUP$parser$result = new java_cup.runtime.Symbol(6/* binary_exp */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 43: // assignment_exp ::= identifier ASSIGN exp
		{
			SymTabEntry RESULT = null;
			int destinationleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int destinationright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			SymTabEntry destination = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int assignOperationleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int assignOperationright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			Integer assignOperation = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry e = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			Semantic.assertValidLValue(destination, fContext);
			final SymTabEntry originalVariable = fContext.getVariable(destination.getName());
			Semantic.assertTypes(originalVariable.getType(), e.getType(), "assignment");

			destination.setKind(originalVariable.getKind());
			destination.getType().setInnerType(originalVariable.getType().getInnerType());
			destination.setAttribute(originalVariable.getAttribute());
			destination.setPointee(originalVariable);

			if (assignOperation != Definitions.ASSIGN_OP) {
				final SymTabEntry tempRegister = fCodegen.genMovToRegister(destination);
				Semantic.assertValidOperandPointerLevel(e, tempRegister, assignOperation,
						"binary " + Definitions.OP_TOKEN[assignOperation], fContext);
				e = fCodegen.genArith(assignOperation, tempRegister, e);
			}

			fCodegen.genMov(e, destination);
			RESULT = destination;

			CUP$parser$result = new java_cup.runtime.Symbol(4/* assignment_exp */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 42: // assignment_statement ::= assignment_exp SEMICOLON
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(22/* assignment_statement */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 41: // num_statement ::= exp NT$4 SEMICOLON
		{
			Object RESULT = null;
			// propagate RESULT from NT$4
			if (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value != null)
				RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			int expleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int expright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			SymTabEntry exp = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;

			CUP$parser$result = new java_cup.runtime.Symbol(31/* num_statement */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 40: // NT$4 ::=
		{
			Object RESULT = null;
			int expleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int expright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry exp = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			fRegisters.releaseReg(exp);

			CUP$parser$result = new java_cup.runtime.Symbol(38/* NT$4 */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 39: // stmt ::= variable_decl
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(20/* stmt */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 38: // stmt ::= compound_statement
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(20/* stmt */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 37: // stmt ::= return_statement
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(20/* stmt */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 36: // stmt ::= while_statement
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(20/* stmt */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 35: // stmt ::= if_statement
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(20/* stmt */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 34: // stmt ::= function_call_statement
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(20/* stmt */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 33: // stmt ::= num_statement
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(20/* stmt */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 32: // stmt ::= assignment_statement
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(20/* stmt */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 31: // statement ::= stmt
		{
			Object RESULT = null;

			// after the statement is done, we generate inc (++) or dec (--)
			// statements present in the previous line
			// (e.g. in: int x = y++, we first generate int x = y and finally
			// inc y);
			fContext.generateIncDecStatements();

			CUP$parser$result = new java_cup.runtime.Symbol(21/* statement */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 30: // statement_list ::=
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(19/* statement_list */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 29: // statement_list ::= statement_list statement
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(19/* statement_list */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 28: // body ::= LBRACKET NT$2 statement_list NT$3 RBRACKET
		{
			Object RESULT = null;
			// propagate RESULT from NT$2
			if (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value != null)
				RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
			// propagate RESULT from NT$3
			if (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value != null)
				RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;

			CUP$parser$result = new java_cup.runtime.Symbol(18/* body */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 27: // NT$3 ::=
		{
			Object RESULT = null;

			fCodegen.genStrLab(fContext.fFunction.getName(), "_exit", true);
			fCodegen.genFunctionReturn();

			CUP$parser$result = new java_cup.runtime.Symbol(37/* NT$3 */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 26: // NT$2 ::=
		{
			Object RESULT = null;

			fContext.enterChildScope();

			fCodegen.genStrLab(fContext.fFunction.getName(), "_body", true);

			CUP$parser$result = new java_cup.runtime.Symbol(36/* NT$2 */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 25: // parameter ::= TYPE identifier
		{
			Object RESULT = null;
			int typeleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int typeright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			Integer type = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			int idfleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int idfright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry idf = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			idf.getType().setInnerType(type);
			fContext.insertVariable(idf);

			CUP$parser$result = new java_cup.runtime.Symbol(16/* parameter */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 24: // parameter_list ::=
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(17/* parameter_list */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 23: // parameter_list ::= parameter_list COMMA parameter
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(17/* parameter_list */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 22: // parameter_list ::= parameter
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(17/* parameter_list */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 21: // function_decl ::= TYPE ID LPAREN NT$1 parameter_list RPAREN
					// body
		{
			Object RESULT = null;
			// propagate RESULT from NT$1
			if (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value != null)
				RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
			int typeleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)).left;
			int typeright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)).right;
			Integer type = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)).value;
			int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;
			int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;
			String id = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;

			fContext.enterGlobalScope();

			CUP$parser$result = new java_cup.runtime.Symbol(15/* function_decl */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 20: // NT$1 ::=
		{
			Object RESULT = null;
			int typeleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int typeright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			Integer type = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
			int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			String id = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;

			final Function function = new Function(id, new Type.SimpleType(type));
			fContext.fFunction = function;
			fContext.insertFunction(function);
			fContext.enterChildScope();

			fCodegen.genFunctionLabel(function);
			fCodegen.genFrameBase();

			CUP$parser$result = new java_cup.runtime.Symbol(35/* NT$1 */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 19: // exp_list ::= exp_list COMMA exp
		{
			ArrayList RESULT = null;
			int listleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int listright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			ArrayList list = (ArrayList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry e = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			RESULT = list;
			RESULT.add(e);

			CUP$parser$result = new java_cup.runtime.Symbol(10/* exp_list */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 18: // exp_list ::= exp
		{
			ArrayList RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry e = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			RESULT = new ArrayList<SymTabEntry>();
			RESULT.add(e);

			CUP$parser$result = new java_cup.runtime.Symbol(10/* exp_list */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 17: // array ::= LBRACKET exp_list RBRACKET
		{
			ArrayList RESULT = null;
			int listleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int listright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			ArrayList list = (ArrayList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;

			// array (e.g. { 1, 2, 3 }
			RESULT = list;

			CUP$parser$result = new java_cup.runtime.Symbol(11/* array */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 16: // identifier ::= ID LSQBRACKET INT_NUMBER RSQBRACKET
		{
			SymTabEntry RESULT = null;
			int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
			int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
			String id = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			String c = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;

			// array ID as an identifier (e.g. x[1])
			RESULT = new SymTabEntry(id, new Type.ArrayType());
			RESULT.setArrayIndex(Integer.decode(c));

			CUP$parser$result = new java_cup.runtime.Symbol(1/* identifier */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 15: // identifier ::= ID LSQBRACKET RSQBRACKET
		{
			SymTabEntry RESULT = null;
			int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			String id = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;

			// array ID as an identifier (e.g. x[])
			RESULT = new SymTabEntry(id, new Type.ArrayType());
			RESULT.setArrayIndex(-1);

			CUP$parser$result = new java_cup.runtime.Symbol(1/* identifier */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 14: // identifier ::= MUL ID
		{
			SymTabEntry RESULT = null;
			int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			String id = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;

			// star ID as an identifier (e.g. *x)
			RESULT = new SymTabEntry(id, new Type.PointerType(1));

			CUP$parser$result = new java_cup.runtime.Symbol(1/* identifier */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 13: // identifier ::= ID
		{
			SymTabEntry RESULT = null;
			int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			String id = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;

			// ID as an identifier (e.g. x)
			RESULT = new SymTabEntry(id, new Type.SimpleType());

			CUP$parser$result = new java_cup.runtime.Symbol(1/* identifier */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 12: // variable ::= identifier ASSIGN array
		{
			VarInit RESULT = null;
			int idfleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int idfright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			SymTabEntry idf = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int assignleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int assignright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			Integer assign = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			int listleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int listright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			ArrayList list = (ArrayList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			// identifier with array initialisation
			Semantic.assertValidAssignForVariableDeclaration(assign);
			RESULT = new VarInit(idf, (SymTabEntry[]) list.toArray(new SymTabEntry[0]));

			CUP$parser$result = new java_cup.runtime.Symbol(8/* variable */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 11: // variable ::= identifier ASSIGN exp
		{
			VarInit RESULT = null;
			int idfleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int idfright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			SymTabEntry idf = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int assignleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int assignright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			Integer assign = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry e = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			// identifier with initialisation
			Semantic.assertValidAssignForVariableDeclaration(assign);
			RESULT = new VarInit(idf, e);

			CUP$parser$result = new java_cup.runtime.Symbol(8/* variable */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 10: // variable ::= identifier
		{
			VarInit RESULT = null;
			int idfleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int idfright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			SymTabEntry idf = (SymTabEntry) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			// identifier
			RESULT = new VarInit(idf);

			CUP$parser$result = new java_cup.runtime.Symbol(8/* variable */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 9: // variable_list ::= variable_list COMMA variable
		{
			ArrayList RESULT = null;
			int listleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int listright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			ArrayList list = (ArrayList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			VarInit v = (VarInit) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;

			// add a variable to the array
			RESULT = list;
			RESULT.add(v);

			CUP$parser$result = new java_cup.runtime.Symbol(9/* variable_list */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 8: // variable_list ::= variable
		{
			ArrayList RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			VarInit v = (VarInit) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;

			// initialise the array for a list of variables
			RESULT = new ArrayList<VarInit>();
			RESULT.add(v);

			CUP$parser$result = new java_cup.runtime.Symbol(9/* variable_list */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 7: // variable_decl ::= TYPE variable_list NT$0 SEMICOLON
		{
			Object RESULT = null;
			// propagate RESULT from NT$0
			if (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value != null)
				RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			int typeleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
			int typeright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
			Integer type = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
			int listleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
			int listright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
			ArrayList list = (ArrayList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;

			CUP$parser$result = new java_cup.runtime.Symbol(14/* variable_decl */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 6: // NT$0 ::=
		{
			Object RESULT = null;
			int typeleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int typeright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			Integer type = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
			int listleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
			int listright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
			ArrayList list = (ArrayList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			// insert all variables into the current context
			for (final Object elem : list) {
				final VarInit var = (VarInit) elem;
				final SymTabEntry idf = var.getIdentifier();
				final SymTabEntry[] initValues = var.getInitValues();

				idf.getType().setInnerType(type);
				fContext.insertVariable(idf, initValues);
			}

			CUP$parser$result = new java_cup.runtime.Symbol(34/* NT$0 */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 5: // declaration ::= variable_decl
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(32/* declaration */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 4: // declaration ::= function_decl
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(32/* declaration */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 3: // declaration_list ::= declaration_list declaration
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(33/* declaration_list */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 2: // declaration_list ::= declaration
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(33/* declaration_list */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 1: // program ::= declaration_list
		{
			Object RESULT = null;

			// check that the program has a main() function
			Semantic.assertHasMain(fContext);

			CUP$parser$result = new java_cup.runtime.Symbol(13/* program */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 0: // $START ::= program EOF
		{
			Object RESULT = null;
			int start_valleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
			int start_valright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
			Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = start_val;
			CUP$parser$result = new java_cup.runtime.Symbol(0/* $START */,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			/* ACCEPT */
			CUP$parser$parser.done_parsing();
			return CUP$parser$result;

		/* . . . . . . */
		default:
			throw new Exception("Invalid action number found in internal parse table");

		}
	}
}
